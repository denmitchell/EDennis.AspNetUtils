using System.ComponentModel.DataAnnotations;

namespace EDennis.AspNetUtils
{
    /// <summary>
    /// A base model class, holding common properties
    /// </summary>
    public class EntityBase : IHasIntegerId, IHasSysGuid, IHasSysUser
    {
        /// <summary>
        /// Whenever possible, have entities implement an integer primary key.
        /// There is wider support in UI frameworks and libraries for entities
        /// with integer primary keys.
        /// </summary>
        [Key]
        public int Id { get; set; }

        /// <summary>
        /// This is the user that created or last modified the record. 
        /// </summary>
        public string SysUser { get; set; }

        /// <summary>
        /// A unique identifier for the record that is independent of the autogenerated
        /// Id. Guids are especially helpful for two scenarios:
        /// <list type="number">
        /// <item>Testing (identity specs and sequences don't rollback without a workaround)</item>
        /// <item>Future migration of data (easier to migrate SysGuid or to use as tracking IDs)</item>
        /// </list>
        /// Note that there is a guid utility for creating test GUIDs from integer Ids: <see cref="GuidUtils.FromId(int)"/>
        /// </summary>
        public Guid SysGuid { get; set; }
    }
}
